
다른 사람들은 API 응답을 위해 다양한 코드 번호 체계를 사용하며, 이는 보통 회사나 프로젝트의 내부 규정에 따라 다를 수 있습니다. 그러나 일반적으로 다음과 같은 사용자 정의 코드 번호 체계가 많이 사용됩니다.

일반적인 사용자 정의 코드 번호 체계
성공 코드

1000: 일반적인 성공 (OK)
1001: 리소스 생성 성공 (Created)
1002: 요청이 처리되어 리소스가 업데이트됨 (Updated)
클라이언트 오류 코드

2000: 일반적인 클라이언트 오류 (Bad Request)
2001: 인증 실패 (Unauthorized)
2002: 권한 없음 (Forbidden)
2003: 리소스를 찾을 수 없음 (Not Found)
2004: 요청이 충돌됨 (Conflict)
2005: 잘못된 입력 (Invalid Input)
서버 오류 코드

3000: 일반적인 서버 오류 (Internal Server Error)
3001: 서비스 불가 (Service Unavailable)
3002: 데이터베이스 오류 (Database Error)
3003: 타임아웃 (Timeout)
예시 코드 체계 사용
여기 몇 가지 실제 예시를 보겠습니다:

PayPal API

10000: 요청이 성공적으로 처리됨
10100: 잘못된 요청 (Bad Request)
10200: 인증 오류 (Unauthorized)
10400: 요청된 리소스를 찾을 수 없음 (Not Found)
10500: 서버 오류 (Internal Server Error)
Stripe API

1000: 요청 성공
2000: 유효하지 않은 요청 파라미터
3000: 인증 실패
4000: API 사용 제한 초과
5000: 서버 오류
Internal Project Example

1000: 성공
2001: 유효하지 않은 요청
2002: 권한 없음
2003: 리소스를 찾을 수 없음
3001: 데이터베이스 오류
3002: 외부 서비스 오류
요약
다양한 프로젝트에서 사용하는 사용자 정의 코드 번호 체계는 다음과 같습니다:

성공: 1000-1999
클라이언트 오류: 2000-2999
서버 오류: 3000-3999
이러한 범위 내에서 각 프로젝트나 회사는 자신들의 필요에 맞게 더 세부적인 코드 번호를 정의하여 사용합니다. 이러한 코드 체계는 API의 응답을 더 명확하게 하고, 클라이언트가 발생한 문제를 더 쉽게 이해하고 처리할 수 있도록 도와줍니다.
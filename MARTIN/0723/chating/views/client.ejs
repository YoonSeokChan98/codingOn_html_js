<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="/socket.io/socket.io.js"></script>
    <!-- <link rel="stylesheet" href="../css/client.css"> -->
    <style>
        #chat {
            background-color: skyblue;
            width: 100%;
            height: 70vh;
            position: relative;
        }

        #chat-form {
            position: absolute;
            bottom: 0%;
            display: flex;
            width: 100%;
            justify-content: space-between;
        }

        #chat-form input {
            width: 90%;
        }

        #chat-form button {
            width: 10%;
        }
    </style>
</head>

<body>
    <h3>채팅방</h3>
    <div id="room">
        <form id="room-form">
            <input type="text" id="userName" placeholder="사용자 이름 입력">
            <input type="text" id="roomName" placeholder="채팅방 만들기" />
            <button>입장</button>
        </form>
    </div>
    <ul id="room-list"></ul>
    <!-- 채팅방 -->
    <!-- hidden -->
    <div id="chat">
        <div id="message">
            <div id="notice"></div>
        </div>
        <form id="chat-form">
            <input type="text" id="chat-message" placeholder="메세지 입력" />
            <button>전송</button>
            <!-- <select name="" id=""></select> -->
        </form>
    </div>

    <script>
        const socket = io();
        const roomForm = document.querySelector('#room-form');
        const chatForm = document.querySelector('#chat-form');
        const notice = document.querySelector('#notice');
        const message = document.querySelector('#message');

        // let clientName = '';

        // 폼 이벤트
        // 채팅이벤트
        chatForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const msg = chatForm.querySelector('#chat-message');
            const name = roomForm.querySelector(('#userName'))
            socket.emit('sendMessage', { name: name.value, message: msg.value });
            msg.value = '';
        });

        // 사용자와 채팅방을 생성하거나 조인하는 이벤트
        roomForm.addEventListener('submit', (e) => { //onclick을 이용해서 만들어도 됨
            e.preventDefault()
            const roomName = roomForm.querySelector('#roomName').value;
            const userName = roomForm.querySelector('#userName').value;

            // 값이 비어있으면 방이름과 닉네임을 적으라는 안내문구를 띄워줌
            if (roomName === '' || userName === '') {
                alert('방이름과 닉네임을 적어주세요');
                return;
            }

            socket.emit('create', { roomName, userName }); //roomName을 백으로 보냄

            const room = document.querySelector('#room');
            const chat = document.querySelector('#chat');
            room.hidden = true;
            chat.hidden = false;

            // 전역변수 clientName에 이곳에서 입력한 닉네임 저장
            // clientName = userName;

        });

        // 소켓이벤트
        socket.on('notice', (arg) => {
            // const roomList = document.querySelector('#room-list');
            console.log('입장 로그:', arg);
            const p = document.querySelector('p');
            p.textContent = arg;
            notice.appendChild(p);
        });

        socket.on('roomList', (arg) => {
            const roomList = document.querySelector('#room-list');
            roomList.textContent = '';
            console.log('roomList', arg);
            arg.forEach((room) => {
                const li = document.createElement('li');
                li.textContent = room;
                roomList.appendChild(li);
            });
        });

        // 채팅 메세지를 출력하는 이벤트
        socket.on('newMessage', (arg) => {
            const { userName, message: msg } = arg;
            const p = document.createElement('p');
            
            if (clientName === userName) {
                // 내가 입력한 채팅
                p.classList.add('myChat')
            }

            p.textContent = `${userName}:${msg}`;
            message.appendChild(p);
        });
    </script>

</body>

</html>